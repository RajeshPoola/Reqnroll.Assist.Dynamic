// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AssistDynamic.Specs
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Conversions of values")]
    public partial class ConversionsOfValuesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Conversions of values", "\tIn order to easier compare values of the most common types\r\n\tAs a user of Reqnro" +
                "ll Dynamic\r\n\tI want Reqnroll Dynamic to translate strings into the closest resse" +
                "mbling real type", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "ValueConversions.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Strings should be translated to string")]
        public async System.Threading.Tasks.Task StringsShouldBeTranslatedToString()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Strings should be translated to string", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "Name"});
                table41.AddRow(new string[] {
                            "Marcus"});
#line 8
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table41, "When ");
#line hidden
#line 11
 await testRunner.ThenAsync("the Name property should equal \'Marcus\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Integers should be translated from strings")]
        public async System.Threading.Tasks.Task IntegersShouldBeTranslatedFromStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Integers should be translated from strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                            "Age"});
                table42.AddRow(new string[] {
                            "39"});
#line 14
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table42, "When ");
#line hidden
#line 17
 await testRunner.ThenAsync("the Age property should equal 39", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Doubles should be translated from strings")]
        public async System.Threading.Tasks.Task DoublesShouldBeTranslatedFromStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Doubles should be translated from strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table43 = new global::Reqnroll.Table(new string[] {
                            "Length in meters"});
                table43.AddRow(new string[] {
                            "1.96"});
#line 20
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table43, "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("the LengthInMeters property should equal \'1.96\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Decimals should be translated from strings")]
        public async System.Threading.Tasks.Task DecimalsShouldBeTranslatedFromStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Decimals should be translated from strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table44 = new global::Reqnroll.Table(new string[] {
                            "Molecular Weight"});
                table44.AddRow(new string[] {
                            "1000000000.1111991111"});
#line 26
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table44, "When ");
#line hidden
#line 29
 await testRunner.ThenAsync("the MolecularWeight property should equal \'1000000000.1111991111\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dates should be translated from strings")]
        public async System.Threading.Tasks.Task DatesShouldBeTranslatedFromStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Dates should be translated from strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table45 = new global::Reqnroll.Table(new string[] {
                            "Birth date"});
                table45.AddRow(new string[] {
                            "1972-10-09"});
#line 32
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table45, "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("the BirthDate property should equal 1972-10-09", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bools should be translated from strings")]
        public async System.Threading.Tasks.Task BoolsShouldBeTranslatedFromStrings()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Bools should be translated from strings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table46 = new global::Reqnroll.Table(new string[] {
                            "Is developer"});
                table46.AddRow(new string[] {
                            "false"});
#line 38
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table46, "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("the IsDeveloper property should equal \'false\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A strange double should not be translated into a date")]
        public async System.Threading.Tasks.Task AStrangeDoubleShouldNotBeTranslatedIntoADate()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A strange double should not be translated into a date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "Length in meters"});
                table47.AddRow(new string[] {
                            "4.567"});
#line 44
 await testRunner.WhenAsync("I create a dynamic instance from this table", ((string)(null)), table47, "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("the LengthInMeters property should equal \'4.567\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for instance creation")]
        public async System.Threading.Tasks.Task TheresWaysToDisableTypeConversionForInstanceCreation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("There\'s ways to disable type conversion for instance creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters"});
                table48.AddRow(new string[] {
                            "012345",
                            "044",
                            "1972-13-09",
                            "1,96"});
#line 50
 await testRunner.WhenAsync("I create a dynamic instance from this table using no type conversion", ((string)(null)), table48, "When ");
#line hidden
#line 53
 await testRunner.ThenAsync("the Name value should still be \'012345\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 54
 await testRunner.AndAsync("the Age value should still be \'044\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.AndAsync("the birth date should still be \'1972-13-09\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.AndAsync("length in meter should still be \'1,96\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for instance creation with key/value tabl" +
            "es")]
        public async System.Threading.Tasks.Task TheresWaysToDisableTypeConversionForInstanceCreationWithKeyValueTables()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("There\'s ways to disable type conversion for instance creation with key/value tabl" +
                    "es", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "Key",
                            "Value"});
                table49.AddRow(new string[] {
                            "Name",
                            "012345"});
                table49.AddRow(new string[] {
                            "Age",
                            "044"});
                table49.AddRow(new string[] {
                            "Birth date",
                            "1972-13-09"});
                table49.AddRow(new string[] {
                            "Length in meters",
                            "1,96"});
#line 59
 await testRunner.WhenAsync("I create a dynamic instance from this table using no type conversion", ((string)(null)), table49, "When ");
#line hidden
#line 65
 await testRunner.ThenAsync("the Name value should still be \'012345\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 66
 await testRunner.AndAsync("the Age value should still be \'044\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
 await testRunner.AndAsync("the birth date should still be \'1972-13-09\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
 await testRunner.AndAsync("length in meter should still be \'1,96\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for set creation")]
        public async System.Threading.Tasks.Task TheresWaysToDisableTypeConversionForSetCreation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("There\'s ways to disable type conversion for set creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table50 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age"});
                table50.AddRow(new string[] {
                            "012345",
                            "044"});
                table50.AddRow(new string[] {
                            "Arvid",
                            "1"});
#line 71
 await testRunner.WhenAsync("I create a set of dynamic instances from this table using no type conversion", ((string)(null)), table50, "When ");
#line hidden
#line 75
 await testRunner.ThenAsync("I should have a list of 2 dynamic objects", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
 await testRunner.AndAsync("the 1 item should still Name equal \'012345\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
 await testRunner.AndAsync("the 1 item should still Age equal \'044\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There\'s ways to disable type conversion for matching a dynamic instance against a" +
            " table")]
        public async System.Threading.Tasks.Task TheresWaysToDisableTypeConversionForMatchingADynamicInstanceAgainstATable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("There\'s ways to disable type conversion for matching a dynamic instance against a" +
                    " table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table51 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age"});
                table51.AddRow(new string[] {
                            "012345",
                            "039"});
#line 80
 await testRunner.GivenAsync("I create a dynamic instance from this table using no type conversion", ((string)(null)), table51, "Given ");
#line hidden
                global::Reqnroll.Table table52 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age"});
                table52.AddRow(new string[] {
                            "012345",
                            "039"});
#line 83
 await testRunner.WhenAsync("I compare it to this table using no type conversion", ((string)(null)), table52, "When ");
#line hidden
#line 86
 await testRunner.ThenAsync("no instance comparison exception should have been thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Comparing against an identical table should match")]
        public async System.Threading.Tasks.Task ComparingAgainstAnIdenticalTableShouldMatch()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Comparing against an identical table should match", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table53 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age"});
                table53.AddRow(new string[] {
                            "012345",
                            "039"});
                table53.AddRow(new string[] {
                            "065484",
                            "003"});
#line 89
 await testRunner.GivenAsync("I create a set of dynamic instances from this table using no type conversion", ((string)(null)), table53, "Given ");
#line hidden
                global::Reqnroll.Table table54 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age"});
                table54.AddRow(new string[] {
                            "012345",
                            "039"});
                table54.AddRow(new string[] {
                            "065484",
                            "003"});
#line 93
 await testRunner.WhenAsync("I compare the set to this table using no type conversion", ((string)(null)), table54, "When ");
#line hidden
#line 97
 await testRunner.ThenAsync("no set comparison exception should have been thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
