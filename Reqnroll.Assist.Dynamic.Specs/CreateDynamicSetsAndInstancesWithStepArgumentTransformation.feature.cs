// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AssistDynamic.Specs
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create dynamic sets and instance with step argument transformations")]
    public partial class CreateDynamicSetsAndInstanceWithStepArgumentTransformationsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Create dynamic sets and instance with step argument transformations", "  In order to write super slick and easy code\r\n  As a Reqnroll step definition de" +
                "veloper\r\n  I want to be able to define the types as argument to the step", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "CreateDynamicSetsAndInstancesWithStepArgumentTransformation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Creating dynamic set with the use of step argument transformation")]
        public async System.Threading.Tasks.Task CreatingDynamicSetWithTheUseOfStepArgumentTransformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Creating dynamic set with the use of step argument transformation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters"});
                table29.AddRow(new string[] {
                            "Marcus",
                            "39",
                            "1972-10-09",
                            "1.96"});
                table29.AddRow(new string[] {
                            "Albert",
                            "3",
                            "2008-01-24",
                            "1.03"});
                table29.AddRow(new string[] {
                            "Gustav",
                            "1",
                            "2010-03-19",
                            "0.84"});
                table29.AddRow(new string[] {
                            "Arvid",
                            "1",
                            "2010-03-19",
                            "0.85"});
#line 7
 await testRunner.GivenAsync("I create a set of dynamic instances from this table using step argument transform" +
                        "ation", ((string)(null)), table29, "Given ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters"});
                table30.AddRow(new string[] {
                            "Marcus",
                            "39",
                            "1972-10-09",
                            "1.96"});
                table30.AddRow(new string[] {
                            "Albert",
                            "3",
                            "2008-01-24",
                            "1.03"});
                table30.AddRow(new string[] {
                            "Gustav",
                            "1",
                            "2010-03-19",
                            "0.84"});
                table30.AddRow(new string[] {
                            "Arvid",
                            "1",
                            "2010-03-19",
                            "0.85"});
#line 13
 await testRunner.WhenAsync("I compare the set to this table using step argument transformation", ((string)(null)), table30, "When ");
#line hidden
#line 19
 await testRunner.ThenAsync("no set comparison exception should have been thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Matching a dynamic instance against a table")]
        public async System.Threading.Tasks.Task MatchingADynamicInstanceAgainstATable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Matching a dynamic instance against a table", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters",
                            "Is Developer"});
                table31.AddRow(new string[] {
                            "Marcus",
                            "39",
                            "1972-10-09",
                            "1.96",
                            "true"});
#line 22
 await testRunner.GivenAsync("I create a dynamic instance from this table using step argument transformation", ((string)(null)), table31, "Given ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters",
                            "Is Developer"});
                table32.AddRow(new string[] {
                            "Marcus",
                            "39",
                            "1972-10-09",
                            "1.96",
                            "true"});
#line 25
 await testRunner.WhenAsync("I compare it to this table using step argument transformation", ((string)(null)), table32, "When ");
#line hidden
#line 28
 await testRunner.ThenAsync("no instance comparison exception should have been thrown", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test property with step argument transformation")]
        public async System.Threading.Tasks.Task TestPropertyWithStepArgumentTransformation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Test property with step argument transformation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Age",
                            "Birth date",
                            "Length in meters",
                            "Is Developer"});
                table33.AddRow(new string[] {
                            "Marcus",
                            "39",
                            "1972-10-09",
                            "1.96",
                            "true"});
#line 31
 await testRunner.GivenAsync("I create a dynamic instance from this table using step argument transformation", ((string)(null)), table33, "Given ");
#line hidden
#line 34
 await testRunner.ThenAsync("the Name property should equal \'Marcus\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 35
 await testRunner.AndAsync("the IsDeveloper property should equal \'true\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
